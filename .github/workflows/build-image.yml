name: Build image
on:
  workflow_call:
    inputs:
      containerfile:
        description: "The path to the Containerfile"
        required: true
        type: string
      image-name:
        description: "The name of the image to build"
        required: true
        type: string
      previous-image:
        description: "The previous version of this image. This will be used to compute the changelog."
        required: false
        type: string
      image-description:
        description: "The description of the image to build"
        required: false
        type: string
        default: "AlmaLinux image"
      image-registry:
        description: "The registry to push the image to"
        required: false
        type: string
        default: "ghcr.io"
      image-path:
        description: "The path to the image in the registry"
        required: false
        type: string
        # default: "${{ github.event.repository.owner.login }}"
        default: "${{ github.repository_owner }}"
      platforms:
        description: "The platforms to build the image for"
        required: false
        type: string
        default: "amd64,arm64"
      docs-url:
        description: "The URL to the documentation for the image"
        required: false
        type: string
        default: "${{ github.event.repository.html_url }}"
      REGISTRY_USER:
        description: "The username to use for the registry"
        required: false
        type: string
        default: "${{ github.actor }}"
    outputs:
      image-ref:
        description: "The image reference of the built image"
        value: ${{ jobs.manifest.outputs.image }}
      digest:
        description: "The digest of the built image"
        value: ${{ jobs.manifest.outputs.digest }}
      image-id:
        description: "The image ID of the built image"
        value: ${{ jobs.manifest.outputs.image-id }}
      # version:
      #   description: "The version of the built image"
      #   value: ${{ jobs.manifest.outputs.version }}
      # redhat-id:
      #   description: "The redhat.id label of the built image"
      #   value: ${{ jobs.manifest.outputs.redhat-id }}
      # redhat-version-id:
      #   description: "The redhat.version-id label of the built image"
      #   value: ${{ jobs.manifest.outputs.redhat-version-id }}
    secrets:
      REGISTRY_TOKEN:
        description: "The token to use for the registry"
        required: true
      SIGNING_SECRET:
        description: "The private key used to sign the image"
        required: false

env:
  IMAGE_NAME: ${{ inputs.image-name }}
  CONTAINERFILE: ${{ inputs.containerfile }}
  WORKING_TAG: "run-${{ github.run_number }}"
  IMAGE_REGISTRY: ${{ inputs.image-registry }}
  IMAGE_PATH: ${{ inputs.image-path }}
  SIGNING_ENABLED: ${{ secrets.SIGNING_SECRET != '' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image-name }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          # turn the comma separated string into a list
          platforms=()
          IFS=',' read -r -a platforms <<< "${{ inputs.platforms }}"

          MATRIX="{\"include\":[]}"
          for platform in "${platforms[@]}"; do
            MATRIX=$(echo $MATRIX | jq ".include += [{\"platform\": \"$platform\"}]")
          done
          echo "matrix=$(echo $MATRIX | jq -c '.')" >> $GITHUB_OUTPUT

  build_push:
    name: Build and push image
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    timeout-minutes: 60
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image-ref: ${{ steps.push.outputs.image-ref }}
      digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.REGISTRY_TOKEN }} | podman login -u ${{ inputs.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}
          echo ${{ secrets.REGISTRY_TOKEN }} | docker login -u ${{ inputs.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}

      - name: Maximize build space
        if: matrix.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      - name: Build image
        id: build
        shell: bash
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
        run: |
          sudo podman build \
            --security-opt=label=disable \
            --cap-add=all \
            --device /dev/fuse \
            --timestamp=0 \
            --iidfile /tmp/image-id \
            --build-arg IMAGE_NAME=${{ env.IMAGE_NAME }} \
            --build-arg IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }} \
            -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -f ${{ env.CONTAINERFILE }} \
            .

          echo "image-id=$(cat /tmp/image-id)" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
          sudo podman image inspect ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} | jq .

      - name: Check image
        id: check
        shell: bash
        env:
          IMAGE_ID: ${{ steps.build.outputs.image-id }}
        run: |
          INSPECT=$(sudo podman image inspect ${{ env.IMAGE_ID }} )
          echo "redhat-id=$(echo "$INSPECT" | jq -r '.[0].Labels["redhat.id"]')" >> $GITHUB_OUTPUT
          echo "redhat-version-id=$(echo "$INSPECT" | jq -r '.[0].Labels["redhat.version-id"]')" >> $GITHUB_OUTPUT
          echo "version=$(echo "$INSPECT" | jq -r '.[0].Labels["org.opencontainers.image.version"]')" >> $GITHUB_OUTPUT

          sudo podman run --rm ${{ env.IMAGE_ID }} cat /etc/os-release

      - name: Setup Syft
        id: setup-syft
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action/download-syft@9f7302141466aa6482940f15371237e9d9f4c34a # v0

      - name: Generate SBOM
        id: generate-sbom
        if: github.event_name != 'pull_request'
        env:
          IMAGE_ID: ${{ steps.build.outputs.image-id }}
          SYFT_CMD: ${{ steps.setup-syft.outputs.cmd }}
        run: |
          sudo systemctl start podman.socket

          OUTPUT_PATH="$(mktemp -d)/sbom.json"
          export SYFT_PARALLELISM=$(($(nproc)*2))
          sudo $SYFT_CMD ${IMAGE_ID} -o spdx-json=${OUTPUT_PATH}
          echo "OUTPUT_PATH=${OUTPUT_PATH}" >> $GITHUB_OUTPUT

      - name: Run Rechunker
        if: github.event_name != 'pull_request'
        id: rechunk
        uses: hhd-dev/rechunk@ca77507401f8700bb0b25ebecbbf980a078cd180 # v1.2.2
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.1"
          ref: ${{ steps.build.outputs.image-id }}
          prev-ref: ${{ inputs.previous-image }}
          skip_compression: true
          version: ${{ steps.check.outputs.version }}
          pretty: ${{ steps.check.outputs.version }}
          labels: |
            redhat.id=${{ steps.check.outputs.redhat-id }}
            redhat.version-id=${{ steps.check.outputs.redhat-version-id }}

      - name: Load Image
        if: github.event_name != 'pull_request'
        id: load
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
        run: |
          if [ -s ${{ steps.rechunk.outputs.changelog }} ]; then
            echo "# Changelog" >> $GITHUB_STEP_SUMMARY
            cat ${{ steps.rechunk.outputs.changelog }} >> $GITHUB_STEP_SUMMARY
          fi

          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.location }}
          podman image tag $IMAGE ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          IMAGE=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          INSPECT=$(podman image inspect $IMAGE)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "digest=$(echo "$INSPECT" | jq -r '.[0].Digest')" >> $GITHUB_OUTPUT
          echo "image-id=$(echo "$INSPECT" | jq -r '("sha256:" + .[0].Id)')" >> $GITHUB_OUTPUT
          echo "redhat-id=$(echo "$INSPECT" | jq -r '.[0].Labels["redhat.id"]')" >> $GITHUB_OUTPUT
          echo "redhat-version-id=$(echo "$INSPECT" | jq -r '.[0].Labels["redhat.version-id"]')" >> $GITHUB_OUTPUT
          echo "version=$(echo "$INSPECT" | jq -r '.[0].Labels["org.opencontainers.image.version"]')" >> $GITHUB_OUTPUT
          echo $INSPECT | jq .

      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: metadata
        with:
          images: ${{ steps.load.outputs.image-id }}
          labels: |
            containers.bootc=1
            org.opencontainers.image.created=${{ steps.build.outputs.date }}
            org.opencontainers.image.description=${{ inputs.image-description }}
            org.opencontainers.image.documentation=${{ inputs.docs-url }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/${{ inputs.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      # Push the image to GHCR (Image Registry)
      - name: Push to registry
        if: github.event_name != 'pull_request'
        id: push
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: |
          set -x
          podman tag ${{ steps.load.outputs.image-id }} ${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }}
          for i in {1..3}; do
            podman push --digestfile=/tmp/digestfile ${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }} && break || sleep $((5 * i));
          done
          REMOTE_IMAGE_DIGEST=$(cat /tmp/digestfile)
          echo "digest=$REMOTE_IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "image-ref=${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          cat /tmp/digestfile

      - name: Install Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
        if: ${{ github.event_name != 'pull_request' }} && ${{ env.SIGNING_ENABLED == 'true' }}

      - name: Sign Image
        if: github.event_name != 'pull_request' && ${{ env.SIGNING_ENABLED }} == true
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.push.outputs.image-ref }}@${{ steps.push.outputs.digest }}

      - name: Add SBOM Attestation
        if: github.event_name != 'pull_request' && ${{ env.SIGNING_ENABLED }} == true
        env:
          IMAGE: ${{ steps.push.outputs.image-ref }}
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          SBOM_OUTPUT: ${{ steps.generate-sbom.outputs.OUTPUT_PATH }}
        run: |
          cd "$(dirname "$SBOM_OUTPUT")"
          cosign attest -y \
            --predicate ./sbom.json \
            --type spdxjson \
            --key env://COSIGN_PRIVATE_KEY \
            "${IMAGE}@${DIGEST}"

      - name: Create Job Outputs
        if: github.event_name != 'pull_request'
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          PLATFORM: ${{ matrix.platform }}
          DIGEST: ${{ steps.push.outputs.digest }}
          VERSION_ID: ${{ steps.load.outputs.version-id }}
        run: |
          mkdir -p /tmp/outputs/digests
          echo "${DIGEST}" > /tmp/outputs/digests/${IMAGE_NAME}-${PLATFORM}.txt
          # mkdir -p /tmp/outputs/versions
          # echo "${DIGEST}" > /tmp/outputs/versions/${IMAGE_NAME}-${PLATFORM}.txt

      - name: Upload Output Artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ matrix.platform }}
          retention-days: 1
          if-no-files-found: error
          path: |
            /tmp/outputs/digests/*.txt

  manifest:
    name: Create Manifest
    runs-on: ubuntu-latest
    if: always()
    needs:
      - generate_matrix
      - build_push
    container:
      image:  cgr.dev/chainguard/wolfi-base:latest@sha256:e1d402d624011d0f4439bfb0d46a3ddc692465103c7234a326e0194953c3cfe0
      options: --privileged --security-opt seccomp=unconfined
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image: ${{ steps.push_manifest.outputs.image }}
      digest: ${{ steps.push_manifest.outputs.digest }}
      image-id: ${{ steps.push_manifest.outputs.image-id }}
    steps:
      - name: Install dependencies
        run: |
          apk add \
            jq \
            git \
            podman \
            uutils \
            bash \
            conmon \
            crun \
            netavark \
            fuse-overlayfs
          ln -sf /bin/bash /bin/sh
          mkdir -p /etc/containers
          echo '{"default":[{"type":"insecureAcceptAnything"}]}' | jq . > /etc/containers/policy.json

      - name: Exit on failure
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done

      - name: Get current date
        id: date
        run: |
          # Should generate a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: metadata
        if: github.event_name != 'pull_request'
        with:
          tags: |
            type=raw,value=${{ env.WORKING_TAG }}
            type=sha,enable=${{ github.event_name != 'pull_request' }}
            type=ref,event=pr
          labels: |
            containers.bootc=1
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ inputs.image-description }}
            org.opencontainers.image.documentation=${{ inputs.docs-url }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/${{ inputs.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Fetch Build Outputs
        if: github.event_name != 'pull_request'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: ${{ env.IMAGE_NAME }}-*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Load Outputs
        if: github.event_name != 'pull_request'
        id: load-outputs
        run: |
          DIGESTS_JSON=$(jq -n '{}')
          ls -lR /tmp/artifacts/
          for digest_file in /tmp/artifacts/*.txt; do
            cat $digest_file
            # Extract the platform from the file name
            PLATFORM=$(basename $digest_file | rev | cut -d'-' -f1 | rev | cut -d'.' -f1)
            DIGEST=$(cat $digest_file)
            # Add the platform and digest to the JSON object
            DIGESTS_JSON=$(echo "$DIGESTS_JSON" | jq --arg key "$PLATFORM" --arg value "$DIGEST" '. + {($key): $value}')
          done
          echo "DIGESTS_JSON=$(echo $DIGESTS_JSON | jq -c '.')" >> $GITHUB_OUTPUT
          echo $DIGESTS_JSON | jq -c '.'

      - name: Create Manifest
        if: github.event_name != 'pull_request'
        id: create-manifest
        env:
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: |
          podman manifest create ${{ env.IMAGE_REF }}
          echo "MANIFEST=${{ env.IMAGE_REF }}" >> $GITHUB_OUTPUT

      - name: Populate Manifest
        if: github.event_name != 'pull_request'
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          DIGESTS_JSON: ${{ steps.load-outputs.outputs.DIGESTS_JSON }}
          LABELS: ${{ steps.metadata.outputs.labels }}
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: |
          DIGESTS=$(echo "$DIGESTS_JSON" | jq -c '.')
          # turn the comma separated string into a list
          platforms=()
          IFS=',' read -r -a platforms <<< "${{ inputs.platforms }}"
          for platform in ${platforms[@]}; do
            digest=$(echo $DIGESTS | jq -r ".$platform")
            echo "Adding ${{ env.IMAGE_REF }}@$digest for $platform"
            podman manifest add $MANIFEST ${{ env.IMAGE_REF }}@$digest --arch $platform
          done

          # Apply the labels to the manifest (separated by newlines)
          while IFS= read -r label; do
            echo "Applying label $label to manifest"
            podman manifest annotate --index --annotation "$label" $MANIFEST
          done <<< "$LABELS"

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        run: echo ${{ secrets.REGISTRY_TOKEN }} | podman login -u ${{ inputs.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}

      - name: Push Manifest
        if: github.event_name != 'pull_request'
        id: push_manifest
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          TAGS: ${{ steps.metadata.outputs.tags }}
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: |
          while IFS= read -r tag; do
            podman manifest push --all=false --digestfile=/tmp/digestfile $MANIFEST $IMAGE_REF:$tag
          done <<< "$TAGS"

          DIGEST=$(cat /tmp/digestfile)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "image=$IMAGE_REF" >> $GITHUB_OUTPUT

          INSPECT=$(podman manifest inspect $IMAGE_REF)
          echo "image-id=$(echo "$INSPECT" | jq -r '("sha256:" + .[0].Id)')" >> $GITHUB_OUTPUT

          echo "Pushed manifest to $IMAGE_REF with digest $DIGEST"
          echo $INSPECT | jq .

  # Cosign throws errors when ran inside the Fedora container for one reason or another
  # so we move this to another step in order to run on Ubuntu
  sign:
    needs: manifest
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Login to Container Registry
        if: ${{ env.SIGNING_ENABLED }} == true
        run: |
          echo ${{ secrets.REGISTRY_TOKEN }} | podman login -u ${{ inputs.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}
          echo ${{ secrets.REGISTRY_TOKEN }} | docker login -u ${{ inputs.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}

      - name: Install Cosign
        if: ${{ env.SIGNING_ENABLED }} == true
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

      - name: Sign Manifest
        if: ${{ env.SIGNING_ENABLED }} == true
        env:
          DIGEST: ${{ needs.manifest.outputs.digest }}
          IMAGE: ${{ needs.manifest.outputs.image }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE@$DIGEST
