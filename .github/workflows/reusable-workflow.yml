name: Build image
on:
  workflow_call:
    inputs:
      containerfile:
        description: "The path to the Containerfile"
        required: true
        type: string
      image-name:
        description: "The name of the image to build"
        required: true
        type: string
      image-registry:
        description: "The registry to push the image to"
        required: false
        type: string
        default: "ghcr.io"
      image-path:
        description: "The path to the image in the registry"
        required: false
        type: string
        default: "${{ github.event.repository.owner.login }}"
      platforms:
        description: "The platforms to build the image for"
        required: false
        type: string
        default: "amd64,arm64"
    outputs:
      image-ref:
        description: "The image reference of the built image"
        value: ${{ jobs.build_push.outputs.image-ref }}
      digest:
        description: "The digest of the built image"
        value: ${{ jobs.build_push.outputs.digest }}
    secrets:
      REGISTRY_USER:
        description: "The username to use for the registry"
        required: true
      REGISTRY_TOKEN:
        description: "The token to use for the registry"
        required: true
      SIGNING_SECRET:
        description: "The private key used to sign the image"
        required: true

env:
  IMAGE_NAME: ${{ inputs.image-name }}
  CONTAINERFILE: ${{ inputs.containerfile }}
  WORKING_TAG: "run-${{ github.run_number }}"
  IMAGE_REGISTRY: ${{ inputs.image-registry }}
  IMAGE_PATH: ${{ inputs.image-path }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image-name }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          # turn the comma separated string into a list
          platforms=()
          IFS=',' read -r -a platforms <<< "${{ inputs.platforms }}"

          MATRIX="{\"include\":[]}"
          for platform in "${platforms[@]}"; do
            MATRIX=$(echo $MATRIX | jq ".include += [{\"platform\": \"$platform\"}]")
          done
          echo "matrix=$(echo $MATRIX | jq -c '.')" >> $GITHUB_OUTPUT

  build_push:
    name: Build and push image
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    timeout-minutes: 60
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image-ref: ${{ steps.push.outputs.image-ref }}
      digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.REGISTRY_TOKEN }} | podman login -u ${{ secrets.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}
          echo ${{ secrets.REGISTRY_TOKEN }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin ${{ env.IMAGE_REGISTRY }}

      - name: Maximize build space
        if: matrix.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Build image
        id: build
        shell: bash
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
        run: |
          sudo podman build \
            --security-opt=label=disable \
            --cap-add=all \
            --device /dev/fuse \
            -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -f ${{ env.CONTAINERFILE }} \
            .

      - name: Setup Syft
        id: setup-syft
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action/download-syft@9f7302141466aa6482940f15371237e9d9f4c34a # v0

      - name: Generate SBOM
        id: generate-sbom
        if: github.event_name != 'pull_request'
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
          SYFT_CMD: ${{ steps.setup-syft.outputs.cmd }}
        run: |
          sudo systemctl start podman.socket

          OUTPUT_PATH="$(mktemp -d)/sbom.json"
          export SYFT_PARALLELISM=$(($(nproc)*2))
          sudo $SYFT_CMD ${IMAGE}:${IMAGE_TAG} -o spdx-json=${OUTPUT_PATH}
          echo "OUTPUT_PATH=${OUTPUT_PATH}" >> $GITHUB_OUTPUT

      - name: Run Rechunker
        if: github.event_name != 'pull_request'
        id: rechunk
        uses: hhd-dev/rechunk@ca77507401f8700bb0b25ebecbbf980a078cd180 # v1.2.2
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.1"
          ref: "localhost/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          prev-ref: "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          skip_compression: true
          # version: $ {{ env.CENTOS_VERSION }}

      - name: Load Image
        if: github.event_name != 'pull_request'
        id: load
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
        run: |
          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.location }}
          podman image tag $IMAGE ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          IMAGE=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          IMAGE_DIGEST=$(podman image inspect --format '{{.Digest}}' $IMAGE)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT

      # Push the image to GHCR (Image Registry)
      - name: Push to registry
        if: github.event_name != 'pull_request'
        id: push
        env:
          IMAGE_TAG: ${{ env.WORKING_TAG }}-${{ matrix.platform }}
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: |
          set -x
          podman tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }}
          for i in {1..3}; do
            podman push --digestfile=/tmp/digestfile ${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }} && break || sleep $((5 * i));
          done
          REMOTE_IMAGE_DIGEST=$(cat /tmp/digestfile)
          echo "digest=$REMOTE_IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "image-ref=${{ env.IMAGE_REF }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          cat /tmp/digestfile

      - name: Install Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
        if: github.event_name != 'pull_request'

      - name: Sign Image
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          IMAGE_REF: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
        run: cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REF}@${{ steps.push.outputs.digest }}

      - name: Add SBOM Attestation
        if: github.event_name != 'pull_request'
        env:
          IMAGE: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_PATH }}/${{ env.IMAGE_NAME }}
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          SBOM_OUTPUT: ${{ steps.generate-sbom.outputs.OUTPUT_PATH }}
        run: |
          cd "$(dirname "$SBOM_OUTPUT")"
          cosign attest -y \
            --predicate ./sbom.json \
            --type spdxjson \
            --key env://COSIGN_PRIVATE_KEY \
            "${IMAGE}@${DIGEST}"

      - name: Create Job Outputs
        if: github.event_name != 'pull_request'
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          PLATFORM: ${{ matrix.platform }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          mkdir -p /tmp/outputs/digests
          echo "${DIGEST}" > /tmp/outputs/digests/${IMAGE_NAME}-${PLATFORM}.txt

      - name: Upload Output Artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ matrix.platform }}
          retention-days: 1
          if-no-files-found: error
          path: |
            /tmp/outputs/digests/*.txt
